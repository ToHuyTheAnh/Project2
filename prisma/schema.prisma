// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Banned
  Deleted
}

model User {
  id            String       @id @default(cuid())
  username      String       @unique
  email         String       @unique
  password      String
  status        UserStatus
  role          UserRole
  displayName   String
  avatar        String?
  emailVerified Boolean      @default(false)
  posts         Post[]       @relation("UserPost")
  comments      Comment[]    
  chatBoxes     ChatBox[]    @relation("UserChatBox")
  messages      Message[]
  followings    UserFollow[] @relation("UserFollowing") // Người mình đang theo dõi
  followers     UserFollow[] @relation("UserFollower") // Người đang theo dõi mình
  
  sharedPosts   UserSharePost[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PostStatus {
  Published
  Deleted
  Banned
  Pending
}

model Post {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation("UserPost",fields: [userId], references: [id])
  trendTopicId String
  trendTopic   TrendTopic @relation(fields: [trendTopicId], references: [id])
  title        String
  content      String
  videoUrl     String?
  imageUrl     String?
  status       PostStatus
  likes        Int        @default(0)
  comments     Comment[]

  sharedById   UserSharePost[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CommentStatus {
  Published
  Deleted
}

model Comment {
  id       String        @id @default(cuid())
  userId   String
  user     User          @relation(fields: [userId], references: [id])
  postId   String
  post     Post          @relation(fields: [postId], references: [id])
  content  String
  videoUrl String?
  imageUrl String?
  status   CommentStatus

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatBox {
  id        String    @id @default(cuid())
  users     User[]    @relation("UserChatBox")
  messages  Message[]
  // timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum MessageStatus {
  Published
  Deleted
}

model Message {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  chatBoxId String
  chatBox   ChatBox       @relation(fields: [chatBoxId], references: [id])
  content   String
  status    MessageStatus

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFollow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollower", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
}

model TrendTopic {
  id          String @id @default(cuid())
  posts       Post[]
  title       String
  description String
  note        String

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSharePost {
  id          String @id @default(cuid())

  userId      String
  user        User   @relation(fields: [userId], references: [id])

  postId      String
  post        Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}
